# CI that:
#
# * checks for a Git Tag that looks like a release ("v1.2.0")
# * creates a Github Release™️
# * builds binaries/packages with cargo-dist
# * uploads those packages to the Github Release™️
#
# Note that the Github Release™️ will be created before the packages,
# so there will be a few minutes where the release has no packages
# and then they will slowly trickle in, possibly failing. To make
# this more pleasant we mark the release as a "draft" until all
# artifacts have been successfully uploaded. This allows you to
# choose what to do with partial successes and avoids spamming
# anyone with notifications before the release is actually ready.
name: Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  # Publish ceramic-config to npm for use with js-ceramic
  publish-ceramic-config-wasm:
    runs-on: ubuntu-latest
    env:
      NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - id: install-wasm-pack
        uses: taiki-e/install-action@v1
        with:
          tool: wasm-pack
      - id: build-wasm-pack
        working-directory: ceramic-config
        run: wasm-pack build
      - id: publish-wasm-pack
        working-directory: ceramic-config
        run: |
          echo "//registry.npmjs.org/:_authToken="${{ secrets.NPM_TOKEN }} >> ~/.npmrc
          cat ~/.npmrc
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' >> .npmrc
          cat .npmrc
          npm config set //registry.npmjs.org/:$_authToken ${{ secrets.NPM_TOKEN }}
          wasm-pack publish

  # Build and packages all the things
  build-binaries:
    strategy:
      matrix:
        # For these target platforms
        include:
        - target: x86_64-unknown-linux-gnu
        - target: x86_64-apple-darwin
        - target: aarch64-apple-darwin
        - target: x86_64-pc-windows-msvc
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: |
          rustup update stable
          rustup default stable
      - name: Install cargo-zigbuild
        run: |
          pip3 install ziglang
          cargo install cargo-zigbuild
      - name: Setup target
        run: rustup target add ${{ matrix.target }}
      - name: Run cargo zigbuild
        run: |
          cargo zigbuild --target ${{ matrix.target }}
      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheel_${{ env.RUN_UNIQUE_ID }}_${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/wheel

  publish-release:
    needs: [create-release]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: mark release as non-draft
        run: |
          gh release edit ${{ needs.create-release.outputs.tag }} --draft=false

  bump-versions:
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - id: install-cargo-release
        uses: taiki-e/install-action@v1
        with:
          tool: cargo-release
      - id: perform-release
        run:
          cargo release ${{ inputs.level }} -x

